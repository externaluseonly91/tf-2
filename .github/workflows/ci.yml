name: casper

permissions:
  contents: write
  pages: write
  id-token: write
  packages: write

on:
  push:
    branches:
      - main

jobs:
  casper-job:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1  

      - name: Check AWS authentication
        run: |
          # Check AWS authentication status
          aws sts get-caller-identity


      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.MY_PROJECT_TOKEN }}

      - name: Build my-api-repo
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/my-api-repo:latest -f Dockerfile.rails .
          docker push ghcr.io/${{ github.repository_owner }}/my-api-repo:latest

      - name: Build my-spa-repo
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/my-spa-repo:latest -f Dockerfile.react .
          docker push ghcr.io/${{ github.repository_owner }}/my-spa-repo:latest

      - name: Build my-nginx-repo
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/my-nginx-repo:latest -f Dockerfile.nginx .
          docker push ghcr.io/${{ github.repository_owner }}/my-nginx-repo:latest

      - name: Set up Minikube
        uses: medyagh/setup-minikube@master
        
      - name: Deploy db
        run: kubectl apply -f db-deployment.yaml

      - name: Deploy redis
        run: kubectl apply -f redis-deployment.yaml
        
      - name: Deploy sidekiq
        run: kubectl apply -f sidekiq-deployment.yaml
        
      - name: Deploy api
        run: kubectl apply -f api-deployment.yaml

      - name: Deploy spa
        run: kubectl apply -f spa-deployment.yaml

      - name: Deploy nginx
        run: kubectl apply -f nginx-deployment.yaml

      - name: Wait for 10 minutes
        run: sleep 600  # Wait for 10 minutes (600 seconds)

      - name: Get All Namespaces
        run: kubectl get namespaces
        
      - name: Wait for pods to be running
        run: |
          end=$((SECONDS+300))  # 900 seconds (15 minutes)
          while [[ $SECONDS -lt $end ]]; do
            if [[ $(kubectl get pods -n default | grep -c "Running") -eq 13 ]]; then
              echo "All pods are running."
              break
           fi
           echo "Waiting for pods to be running..."
           sleep 10  # Wait for 10 seconds before checking again
          done

      - name: pods
        run: kubectl get pods --all-namespaces
      

      - name: service
        run: kubectl get services --all-namespaces

      - name: nodes
        run: kubectl get nodes
      
      - name: Get Minikube IP
        id: get-minikube-ip
        run: echo "MINIKUBE_IP=$(minikube ip)" >> $GITHUB_ENV

      - name: Get NodePort for api service
        id: get-api-nodeport
        run: echo "API_NODEPORT=$(kubectl get service -n default api -o jsonpath='{.spec.ports[0].nodePort}')" >> $GITHUB_ENV

      
      - name: Get NodePort for spa service
        id: get-spa-nodeport
        run: echo "SPA_NODEPORT=$(kubectl get service -n default spa -o jsonpath='{.spec.ports[0].nodePort}')" >> $GITHUB_ENV

      - name: Get NodePort for nginx service
        id: get-nginx-nodeport
        run: echo "NGINX_NODEPORT=$(kubectl get service -n default nginx -o jsonpath='{.spec.ports[0].nodePort}')" >> $GITHUB_ENV

      - name: Deploy and test services
        run: |
          minikube_ip=$MINIKUBE_IP
          api_nodeport=$API_NODEPORT
          spa_nodeport=$SPA_NODEPORT
          nginx_nodeport=$NGINX_NODEPORT

      - name: Display NodePort information
        run: |
          echo "API NodePort: $API_NODEPORT"
          echo "SPA NodePort: $SPA_NODEPORT"
          echo "NGINX NodePort: $NGINX_NODEPORT"
        env:
          API_NODEPORT: ${{ steps.get-api-nodeport.outputs.API_NODEPORT }}
          SPA_NODEPORT: ${{ steps.get-spa-nodeport.outputs.SPA_NODEPORT }}
          NGINX_NODEPORT: ${{ steps.get-nginx-nodeport.outputs.NGINX_NODEPORT }}
